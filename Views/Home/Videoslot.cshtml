﻿@{
    ViewBag.Title = "Video Slot Game";
}
@model OnlineCasinoModel.MemberViewModel



<div id="preloader"> GAME LOADING... </div>
<div id="infopanel">
    <div class="container">Please Use at Landscape mode.</div>
</div>
<!-- GAME CONTAINER -->
<div id="game-container">
    <div id="control-panel">
        <p>
            <button id="p0" class="paylineSet close">x</button>
        </p>
        <p>
            <button id="p1" class="paylineSet">payline 1</button>
            <button id="p2" class="paylineSet">payline 2</button>
            <button id="p3" class="paylineSet">payline 3</button>
            <button id="p4" class="paylineSet">payline 4</button>
            <button id="p5" class="paylineSet">payline 5</button>
            <button id="p99" class="paylineSet">scatter</button>
        </p>

    </div>
    <div id="logo"></div>
    <!-- GAMBLING LAYER-->
    <div id="gamble-layer">
        <div class="titles">
            <p> <img src="~/Content/img/assets/gheader1.png" /><img src="~/Content/img/assets/diamond.png" /><span id="gamount">40</span></p>
            <p><img src="~/Content/img/assets/gheader2.png" /><img src="~/Content/img/assets/diamond.png" /><span id="gwin">80</span></p>
        </div>
        <div id="gamble-result-info" class="bigFont round">YOU WIN!..</div>
        <div id="history">
            <p><img src="~/Content/img/assets/history.png" /></p>
            <div id="cardsholder"></div>
        </div>
        <div id="cards">
            <img src="~/Content/img/assets/redcard.png" />
            <img src="~/Content/img/assets/redcard.png" />
            <img src="~/Content/img/assets/redcard.png" />
            <img src="~/Content/img/assets/redcard.png" />
            <img src="~/Content/img/assets/redcard.png" />
            <img class="playCard" src="~/Content/img/assets/redcard.png" />
            <canvas id="cardSwap" width="100" height="142"></canvas>
        </div>
        <div>
            <div id="redButton" class="gambleButton">
                <img src="~/Content/img/assets/red.png" />
            </div>
            <div id="blackButton" class="gambleButton">
                <img src="~/Content/img/assets/blackt.png" />
            </div>
        </div>
        <div id="attemps">
            <span class="count"></span>
        </div>
    </div><!--END GAMBLING LAYER-->
    <div id="modal"></div>
    <!-- PAYLINE LAYERS-->
    <div id="payline-layer">
        <div id="pin">
            <img id="paylineImg" src="" />
        </div>
    </div>
    <!-- END PAYLINE LAYERS-->
    <div class="column"></div>
    <div class="column left-pane"></div>
    <div id="interface">
        <a id="gambleButton" href="javascript:void(0);" class="btn"></a>
        <a id="collectButton" href="javascript:void(0);" class="btn"></a>
        <a id="autoplayButton" href="javascript:void(0);" class="btn"></a>
        <a id="exitButton" href="javascript:void(0);" class="btn"></a>
        <a id="betPanelView" href="javascript:void(0);" class="btnText betButton betPanel"></a>
        <a id="betButton_10" href="javascript:void(0);" class="btnText btn betButton">10</a>
        <a id="betButton_25" href="javascript:void(0);" class="btnText btn betButton">25</a>
        <a id="betButton_50" href="javascript:void(0);" class="btnText btn betButton">50</a>
        <a id="betButton_100" href="javascript:void(0);" class="btnText btn betButton">100</a>
    </div>
    <div id="d535" class="canvasHolder">
        <div class="slotbg"><canvas id="canvas1" width="107" height="324" class="cItem animClass"></canvas></div>
        <div class="slotbg"><canvas id="canvas2" width="107" height="324" class="cItem animClass"></canvas></div>
        <div class="slotbg"><canvas id="canvas3" width="107" height="324" class="cItem animClass"></canvas></div>
        <div class="slotbg"><canvas id="canvas4" width="107" height="324" class="cItem animClass"></canvas></div>
        <div class="slotbg"><canvas id="canvas5" width="107" height="324" class="cItem animClass"></canvas></div>
    </div>
    <div id="animLayer" class="canvasHolder">
        <div class="slotbg anim"><canvas id="animcanvas1" width="107" height="324" class="cItemOver animClass"></canvas></div>
        <div class="slotbg anim"><canvas id="animcanvas2" width="107" height="324" class="cItemOver animClass"></canvas></div>
        <div class="slotbg anim"><canvas id="animcanvas3" width="107" height="324" class="cItemOver animClass"></canvas></div>
        <div class="slotbg anim"><canvas id="animcanvas4" width="107" height="324" class="cItemOver animClass"></canvas></div>
        <div class="slotbg anim"><canvas id="animcanvas5" width="107" height="324" class="cItemOver animClass"></canvas></div>
    </div>
    <div id="imgHolder"></div>
    <div id="dashboard" class="ui_item">
        <div class="inline"><h4> <span id="resultInd">&nbsp;_&nbsp;</span></h4></div>
        <div class="inline"><h4 id="indicator2"></h4></div>
        <div class="inline" style="width:40px;"><h4 id="timer"></h4></div>
        <div class="inline"><span id="spanProfit">Place Your Bet </span></div>
        <div class="inline"><span id="zoomInd"></span></div>
        <div class="inline"><span id="spinLeft"></span></div>
        <div class="inline"><span id="interval"></span></div>
    </div>
    <div id="credit" class="ui_item"><span id="creditAmount">1</span> </div>o
    <div id="balance" class="ui_item"><span id="totalAmount">@Model.TotalAmount$</span> </div>
    <div id="betholder" class="ui_item"><input type="text" id="textInput" value="0"></div>
</div>

<div id="wrapper-test">
    <div>
        <div id="divgameMatrix">
            @{
                for (int i = 0; i < Model.GameModel.Column; i++)
                {
                    <ul id="column_@i" style="float: left;">
                        @for (int j = 0; j < Model.GameModel.Row; j++)
                        {
                            <li id="row_@j">@Model.Matrix[i, j]</li>

                        }
                    </ul>
                }
            }
        </div>
    </div>
    <div style="margin-top: 57px;">
        <div style="float: left; margin-left: 28px;">
            <span id="totalAmount">@Model.TotalAmount$</span>
        </div>
        <div style="margin-left: 264px;">
            <input type="text" id="textInput" value="@Model.Bet" />
            <input id="play" type="button" class="alert-danger" value="Play" />
            <span id="spanProfit"></span>
        </div>
        <span id="spanStatus">(display)</span>
    </div>
</div>

<script type="text/javascript">
    var ws;
    var memberId = @Model.MemberId;
    var vm;

    function initSocket (isAppInited) {
        dlog("initing socket...");
        vm = new GameModel();
        vm.ws = ws;

        $.gDataSend = function (cCol) {
            debug("sending data from socket 1:"+cCol);
            var userData = {
                MemberId: @Model.MemberId,
                LoginToken: "@Model.LoginToken",
                Bet: $("#textInput").val(),
                GambleAccept: true,
                CardColor :cCol, //color of the selected card 0 or 1
                Attempt :  vm.gmodel.attemptCount,
                GAmount :  vm.gmodel.gAmount
            }

            console.log("sending from socket : ", userData);

            //TODO: Sending but recieving result in wrong status...
            ws.send(JSON.stringify(userData));
        }

        debug("DG_DATA_SEND INITED...");

        if (memberId != null) {
            $("#spanStatus").text("connecting");
            ws = new WebSocket("ws://" + window.location.hostname +
                              ":"+window.location.port+"/api/Disconnected");

            ws.onopen = function () {
                $("#spanStatus").text("connected");
                disableGambleButton();
                var nData = {action:Constants.$_SERVER_CONNECTED, data:"4,5,2,1,6,7,2,3,4,6,7,5,2,2,4", profit:0}
                notify("serverResponse", nData);
            };

            ws.onmessage = function(evt) {
                console.timeEnd('[ server-return ]');
                var jsonResult = JSON.parse(evt.data);
                switch (jsonResult.Status) {
                    case 1:

                        console.log("Status=1:Only MatrixModel : ", jsonResult);
                        var nData = { action: Constants.$_SERVER_BET_RESULT, data: jsonResult.GameMatrix, profit: 0 };
                        if(vm.customData.length > 0) {
                            nData.data = vm.customData;
                        }
                        notify("serverResponse", nData);
                        break;

                    case 2:
                        console.log("Status=2:Gamble,Money and Payline Model : ", jsonResult);   
                        if (jsonResult.MoneyModel.Profit > 0) {
                        //if (jsonResult.PayLineModels && jsonResult.PayLineModels.length > 0) {
                            vm.PaylineModels = jsonResult.PayLineModels;
                            vm.gameMoneyModel = jsonResult.MoneyModel;
                            if (jsonResult.IsGamble) {
                                console.log("Gamble Model:", jsonResult.GambleModel);
                                clearGambleData();
                                vm.gmodel.gAmount = jsonResult.GambleModel.GAmount;
                                vm.gmodel.wAmount = jsonResult.GambleModel.WAmount;
                                vm.gmodel.attemptCount = jsonResult.GambleModel.Attempt;
                                enableGambleButton();
                            }

                            if(jsonResult.Win == true && jsonResult.GambleModel.Attempt == 0) {
                                debug(">> END_OF_GAMBLE..attempts left: " + jsonResult.GambleModel.Attempt);

                                var notification = new Notification(Constants.$_SERVER_RESPONSE, {
                                    action: Constants.$_GAMBLE_RESULT_RECIEVED,
                                    data: { result: jsonResult },
                                }, Constants.$_ANIMATION_CONTROLLER_NOTIFICATION);

                                vm.gmodel.attemptCount = jsonResult.GambleModel.Attempt;
                                vm.gmodel.gAmount = jsonResult.GambleModel.WAmount;
                                vm.gmodel.wAmount = "";

                                broadcaster.Notify(notification);
                            }

                            var nData = {action:Constants.$_SERVER_BET_RESULT_WIN, data:jsonResult, profit:parseInt(jsonResult.MoneyModel.Profit)}
                            notify("serverResponse", nData);

                            $("#checkIcon").show();
                            $("#spanProfit").text("");
                           // $("#spanProfit").css("color", "greenyellow");
                        } else {
                            $("#checkIcon").hide();
                            $("#spanProfit").text("Place Your Bet");
                            $("#spanProfit").css("color", "inherit");
                        }
                        dlog("Money:", jsonResult.MoneyModel.TotalAmount);
                        var amount = parseInt(jsonResult.MoneyModel.TotalAmount);
                        $("#totalAmount").text(amount);
                        break;

                    case 3:
                        //TODO: Handle gamble view control to Gambler Controller.
                        //debugger
                        console.log("Status= 3: CardGame Model",jsonResult);
                        var notification = new Notification(Constants.$_SERVER_RESPONSE, {
                            action: Constants.$_GAMBLE_RESULT_RECIEVED,
                            data: { result: jsonResult },
                        }, Constants.$_ANIMATION_CONTROLLER_NOTIFICATION);
                        vm.gmodel.attemptCount = jsonResult.GambleModel.Attempt;
                        vm.gmodel.gAmount = jsonResult.GambleModel.GAmount;

                        broadcaster.Notify(notification);
                        break;
                    default:
                        alert("An error ocurred!!");
                };


            };

            ws.onerror = function (evt) {
                $("#spanStatus").text(evt.message);
            };

            ws.onclose = function () {
                debug("[socket connection CLOSED]");
                $("#spanStatus").text("disconnected");
            };

            if (ws.readyState == WebSocket.OPEN) {
                ws.send($("#textInput").val());
            }
            else {
                $("#spanStatus").text("Connection is closed");
            }

        }

        function clearGambleData() {
            vm.gmodel. gAmount = "";
            vm.gmodel.wAmount = "";
            vm.gmodel.attemptCount = "";
            disableGambleButton();
            //$("#gambleButton").css('display', 'none');
            $("#gamble-layer").css('display', 'none');
        }

        function invokeStop(_async) {
            var async = (_async == true) ? _async : false;
            var  nData = {  action:Constants.$_STOP_REELS, data:{async:async, slotData:''}}
            notify(Constants.$_STOP_REELS, nData);
        }

        function toggleSpin (e) {
            if (ws.readyState == WebSocket.OPEN) {

                dlog("clicked...");
                if(vm.IS_STOP_IMMEDIATE) return;


                if(vm.IS_BUSY && vm.IS_STOP_ENTERED) {
                    notify ('stopImmediate',{});
                }

                if(vm.IS_BUSY) return;

                //if bet is placed, result returned and still spinning
                if(vm.IS_SPINNING && vm.IS_BET_RESULT) {
                    vm.IS_BUSY = true;
                    //$("#resultInd").css("background","#CCFF00"); //yellow
                    invokeStop(vm.Timer < vm.betTimerVal);
                    return;
                }

                //if ready for betting
                if(vm.IS_OPEN_FOR_BET) {
                    console.time('[ server-return ]');
                    var nData = {  action:Constants.$_SERVER_BET_START, data:{}, profit:0};
                    notify(Constants.$_SPIN_REELS, nData);
                    var userData= {
                        MemberId :@Model.MemberId,
                        LoginToken: "@Model.LoginToken",
                        Bet : $("#textInput").val(),
                        GAmount :  vm.gmodel.gAmount,
                        GambleAccept : false
                    }

                    ws.send(JSON.stringify(userData));
                    vm.IS_OPEN_FOR_BET = false;
                    vm.IS_BUSY = true;
                   //$("#resultInd").css("background","#0000cc"); //dark blue
                    return;
                }
            }
            else {
                $("#spanStatus").text("Connection is closed");
            }
        }

        function notify (msg,notificationData) {
            var notification = new Notification(msg,
                {
                    action:notificationData.action,
                    data: notificationData.data,
                    profit:notificationData.profit
                }, "socketMessage"+Constants.$_SOCKET_MESSAGE);
            broadcaster.Notify(notification);
        }

        $("#play").click(function (e) {
            dlog("[start spin ]" +  new Date().getTime());
            toggleSpin(Constants.$_PlayButton);
        });

        $("#btnDisconnect").click(function () {
            ws.close();
        });

        function getGAmount(gAmount) {
            debugger
            return gAmount;
        }
    };//);
</script>
