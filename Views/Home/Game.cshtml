@{
    ViewBag.Title = "Game";
}
@model OnlineCasinoModel.MemberModel


<div id="main-container">

    <div id="game-container">
        <div id="d535">
            <div class="slotbg"><canvas id="canvas1" width="107" height="321" class="cItem animClass"></canvas></div>
            <div class="slotbg"><canvas id="canvas2" width="107" height="321" class="cItem animClass"></canvas></div>
            <div class="slotbg"><canvas id="canvas3" width="107" height="321" class="cItem animClass"></canvas></div>
            <div class="slotbg"><canvas id="canvas4" width="107" height="321" class="cItem animClass"></canvas></div>
            <div class="slotbg"><canvas id="canvas5" width="107" height="321" class="cItem animClass"></canvas></div>
        </div>
        <div id="imgHolder"></div>
        <div id="dashboard">
            <div class="inline"><h4>Slot Game<span id="resultInd">&nbsp;_&nbsp;</span></h4></div><div class="inline"><h4 id="indicator2">frames:0</h4></div><div class="inline"><h4 id="timer">Timer:0</h4></div>
        </div>
    </div>
    
     
</div>


<div id="wrapper-test">
    <div>


        <div id="divgameMatrix">
            @{
                for (int i = 0; i < Model.GameModel.Column; i++)
                {
                    <ul id="column_@i" style="float: left;">
                        @for (int j = 0; j < Model.GameModel.Row; j++)
                        {
                            <li id="row_@j">@Model.Matrix[i, j]</li>

                        }
                    </ul>
                }
            }
        </div>
    </div>
    <div style="margin-top: 57px;">
        <div style="float: left; margin-left: 28px;">
            Your Cash:
            <span id="totalAmount">@Model.TotalAmount$</span>
        </div>
        <div style="margin-left: 264px;">
            <input type="text" id="textInput" value="@Model.Bet" />
            <input id="play" type="button" class="alert-danger" value="Play" />
            <span id="spanProfit"></span>
        </div>
        <span id="spanStatus">(display)</span>
    </div>

</div>

<!--script src="~/Scripts/jquery-1.10.2.js"></script>-->
<script type="text/javascript">
    var ws;
    var memberId = @Model.MemberId;
    //$().ready(function ()
    function initSocket (isAppInited) {
        //dlog("initing socket...");
        if (memberId != null) {
            $("#spanStatus").text("connecting");
            ws = new WebSocket("ws://" + window.location.hostname +
                ":53714/api/Game");

            //ws = new WebSocket("ws://" + window.location.hostname +
            //"/api/Game");

            ws.onopen = function () {
                $("#spanStatus").text("connected");
                //dlog("[socket connection ok!]");
                var nData = {action:Constants.$_SERVER_CONNECTED, data:"4,5,2,1,6,7,2,3,4,6,7,5,2,2,4", profit:0}
                notify("serverResponse", nData);
            };

            ws.onmessage = function (evt) {
                dlog("[server return ok!]" + new Date().getTime());
                dlog("[server return] >>" + evt.data.toString());
                var response = evt.data;
                var result = JSON.parse(evt.data,5);
                response = result.split(" ");
                var totalAmount = "";
                for (var i = 0; i < response.length; i++) {
                    var column = parseInt(response[7]);
                    var row =parseInt(response[9]);
                    var profit = parseInt(response[11]);
                    if (profit > 0) {
                        $("#checkIcon").show();
                        $("#spanProfit").text("   You Win!!!  "+profit+ " $ ");
                        $("#spanProfit").css("background-color", "greenyellow");
                    } else {
                        $("#checkIcon").hide();
                        $("#spanProfit").text("You lost :(( ");
                        $("#spanProfit").css("background-color", "bisque");
                    }
                    if (i === 3) {
                        totalAmount = response[i];
                    }
                    else if(i === 5) {
                        var tempMatrix = response[i].substring(1, response[i].length - 1);
                        var gameMatrix = tempMatrix.split(',');
                        var nData = {  action:Constants.$_SERVER_BET_RESULT, data:tempMatrix, profit:profit}
                        notify("serverResponse", nData);
                        var r;
                        var rowindex = 0;
                        var rowCount = row;
                        $("#divgameMatrix").empty();
                        for (var c = 0; c < column; c++) {
                            if (row <= gameMatrix.length) {
                                $("#divgameMatrix").append("<ul id="+c+">");
                                $("#" + c).css("float", "left");
                                for (r = rowindex; r < row; r++) {
                                    $("#"+c).append("<li>" + gameMatrix[r] + "</li>");
                                }

                                rowindex = row;
                                row = row + rowCount;
                            }

                        }

                        //$.gameData = {gameMatrix:gameMatrix, success:"success", code:200};

                    }

                }
                $("#totalAmount").text(totalAmount);

            };

            ws.onerror = function (evt) {
                $("#spanStatus").text(evt.message);
            };

            ws.onclose = function () {
                //dlog("[socket connection CLOSED]");
                $("#spanStatus").text("disconnected");
            };

            if (ws.readyState == WebSocket.OPEN) {
                ws.send($("#textInput").val());
            }
            else {
                $("#spanStatus").text("Connection is closed");
            }

        }

        function invokeStop(_async) {
            var async = (_async == true) ? _async : false;
            var  nData = {  action:Constants.$_STOP_REELS, data:{async:async, slotData:''}}
            notify(Constants.$_STOP_REELS, nData);
            //dlog("[server send] >> stop spin...");
        }

        function toggleSpin (e) {
            if (ws.readyState == WebSocket.OPEN) {

                if(vm.IS_BUSY) return;

                //if bet is placed, result returned and still spinning
                if(vm.IS_SPINNING && vm.IS_BET_RESULT) {
                    vm.IS_BUSY = true;
                    $("#resultInd").css("background","#CCcc00");//dark yellow
                    invokeStop(vm.Timer < vm.betTimerVal);
                    return;
                }

                //if ready for betting
                if(vm.IS_OPEN_FOR_BET) {
                    var nData = {  action:Constants.$_SERVER_BET_START, data:{}, profit:0};
                    notify(Constants.$_SPIN_REELS, nData);
                    ws.send($("#textInput").val());
                    //dlog("[server send] >> start spin...");
                    vm.IS_OPEN_FOR_BET = false;
                    vm.IS_BUSY = true;
                    $("#resultInd").css("background","#0000ee"); //blue
                    return;
                }
            }
            else {
                $("#spanStatus").text("Connection is closed");
            }
        }

        function notify (msg,notificationData) {
            var notification = new Notification(msg,
                {
                    action:notificationData.action,
                    data: notificationData.data,
                    profit:notificationData.profit
                }, "socketMessage"+Constants.$_SOCKET_MESSAGE);
            broadcaster.Notify(notification);
        }

        $("#play").click(function (e) {
            dlog("click...") + e.target;
            toggleSpin(Constants.$_PlayButton);
        });

        $("#btnDisconnect").click(function () {
            ws.close();
        });
    };//);
</script>
